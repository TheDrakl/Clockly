services:
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: ./entrypoint.sh
    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./backend:/app:cached
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    container_name: react-frontend
    restart: unless-stopped  
    networks:
      - backend

  db:
    image: postgres:14
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: /entrypoint.sh
    command: celery -A backend.celery:app worker --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      web:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    entrypoint: /entrypoint.sh
    command: celery -A backend.celery:app beat --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      web:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
      - frontend
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge